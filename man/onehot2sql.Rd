% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/onehot2sql.R
\name{onehot2sql}
\alias{onehot2sql}
\title{Prepare training data so that it is ready for modeling, apply same transformation for any new data, also transform the transformatio into SQL syntax}
\usage{
onehot2sql(data, meta = NULL, sep = "_", ws_replace = TRUE,
  ws_replace_with = "", output_file_name = NULL, input_table_name = NULL)
}
\arguments{
\item{data}{Data object of class \code{data.frame} or \code{data.table}}

\item{meta}{Optional, it keeps track of all the transformation that has been taken}

\item{sep}{Seperation symbol between the categorical features and their levels, the combination are column names inside \code{data.mat}, default to '_'}

\item{ws_replace}{Bool indicator controls whether white-space and punctuation inside categorical featuress levels should be replaced, default to TRUE which means replacing}

\item{ws_replace_with}{Replacing symbol, default to '' which means all white-space and punctuation should be removed}

\item{output_file_name}{File name that the SQL syntax will write to}

\item{input_table_name}{Name of the raw data table in SQL server, the SQL syntax will select from this table}
}
\value{
A list of 1). \code{meta} data for the transformation; 2). SQL syntax \code{onehot_sql}; 3). matrix \code{data.mat} as data after processing
}
\description{
This function performs full one-hot encoding for all the categorical features inside the training data,
while all NAs inside both categorical and numeric features are perserved.
Other than outputing a matrix \code{data.mat} which is the data after processing,
it also outputs \code{meta} information keeping track of all the transformation the function conducts,
and its SQL syntax is kept in output \code{onehot_sql} or write to a file specified by \code{output_file_name}.
If \code{meta} is specified as input to the function, the transformation and its corresponding SQL syntax will
follow what is kept in \code{meta} exactly.
}
\examples{
# load test data
df = data.frame(ggplot2::diamonds)
head(df)

d1 = data.frame(ggplot2::diamonds)
d1[1,2] = NA  # NA on 1st row cut
d1[2,5] = NA  # NA on 2nd row depth
head(d1)

d2 = data.table(ggplot2::diamonds)
d2[, cut:=factor(cut, ordered=FALSE)]
d2[, clarity:=as.character(clarity)]
d2[, tsdt:=as.IDate('2017-01-05')]
d2[1:3, tsdt:=tsdt-1]
head(d2)

# out is obtained for training data
out <- onehot2sql(df)
out1 <- onehot2sql(d1)  # NA has no influence
out2 <- onehot2sql(d2)  # other catg class other than factor

# perform same transformation for newdata when contrasts.arg is given
# test-1: new data has column class change
newdata = df[1:5,]
newdata$cut = as.character(newdata$cut)
onehot2sql(newdata, meta=out$meta)$model.matrix

# test-2: new data has NA
newdata = df[1:5,]
newdata[1,1]=NA; newdata[2,1]=NA; newdata[3,2]=NA; newdata[3,3]=NA; newdata[5,4]=NA
onehot2sql(newdata, meta=out$meta)$model.matrix

# test-3: newdata has column with new elements
newdata = d2[1:5,]
newdata[5,clarity:='NEW']; newdata[1,tsdt:=as.IDate('2017-05-01')]
onehot2sql(newdata, meta=out2$meta)$model.matrix

# test-4: newdata has new columns
newdata = d2[1:5,]
newdata[,new_col:=1]
onehot2sql(newdata, meta=out2$meta)$model.matrix

# test-5: newdata is lacking some columns
newdata = d2[1:5,]
newdata[,cut:=NULL]
onehot2sql(newdata, meta=out2$meta)$model.matrix
}

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/xgb2sql.R
\name{xgb2sql}
\alias{xgb2sql}
\title{Transform xgboost model object trained in R to SQL syntax}
\usage{
xgb2sql(xgbModel, unique_id, output_file_name, input_table_name)
}
\arguments{
\item{xgbModel}{The trained model object of class \code{xgb.Booster}}

\item{unique_id}{A unique identifier for each raw that must exist in the raw table, or it needs to be created before model scoring}

\item{output_file_name}{File name that the SQL syntax will write to}

\item{input_table_name}{Name of the raw data table in SQL server, the SQL syntax will select from this table}
}
\value{
The SQL syntax will write to the file specified by 'output_file_name'
}
\description{
This function creates SQL syntax aiming for in-database model scoring,
providing a robust way of model deployment. It takes in the trained xgboost model \code{xgbModel},
name of the input database table \code{input_table_name},
and name of a unique identifier within that table \code{unique_id} as input,
writes the SQL query to a file specified by \code{output_file_name}.
}
\examples{
# load data
df = data.frame(ggplot2::diamonds)
df$ID = seq(1, dim(df)[1])
head(df)

# data processing
out <- onehot2sql(df,output_file_name='onehot.txt')
x <- out$model.matrix[,-which(colnames(out$model.matrix)=='price')]
y <- out$model.matrix[,which(colnames(out$model.matrix)=='price')]
# model training
bst <- xgboost(data = x,
               label = y,
               max.depth = 3,
               eta = .3,
               nround = 5,
               nthread = 2,
               objective = 'reg:linear',
               eval_metric = 'mae')

# generate model scoring SQL script
fun_xgboost_to_sql(bst, output_file_name='xgb.txt', input_table_name='df_diamonds', unique_id='ID')
}
